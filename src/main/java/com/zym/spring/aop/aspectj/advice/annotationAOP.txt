相关术语：
1、joinPoint 连接点（接口类中的方法）
2、targe 目标对象（需要增强的类）
3、pointCut 切入点（目标对象需要进行功能增强或则需要切入的方法）
4、advice 通知 （需要增强的功能，业务之外的模块）
5、aspect 切面（通知加上切入点）
6、Weaving 织入（是指把增强应用到目标对象来创建新的代理对象的过程）
7、Proxy 代理 （一个类被AOP织入增强后，就产生一个结果代理类）
通知类型：
①Before：前置通知：在方法执行前执行
②afterreturning 后置通知：方法执行后，如果有异常不执行
③after 最终通知：在方法最终执行后执行，有异常也执行
④around 环绕通知
⑤afterthrowing 异常通知
执行位置(代理类生成伪代码)
new	InvocationHandler() {
	
	Object obj;
	public InvocationHandler(Object obj){
		this.obj = obj;
	}
		
	@Override
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		Object value;
		try {
			try {
				System.out.println("前置通知");(调用前置通知)
				value =  mthod.invoke(obj, args)
			} finally {
				System.out.println("最终通知");(调用最终通知)
			}
			System.out.println("后置通知");(调用后置通知)
		} catch (Exception e) {
		System.out.println("异常通知");(调用异常通知)
		}

		return value;
	}
};

执行顺序：
1、没有异常时
	前置通知（Before）—〉目标方法—〉最终通知（after）—〉后置通知（afterreturning）
2、有异常时
	前置通知（Before）—〉目标方法—〉最终通知（after）—〉异常通知（afterthrowing）

Note：下面的形式是错误的
*		try {
*			System.out.println("前置通知");
*			System.out.println("保存user对象");
*			System.out.println("后置通知");
*		} catch (Exception e) {
*			System.out.println("异常通知");
*		} finally {
*			System.out.println("最终通知");
*		}


